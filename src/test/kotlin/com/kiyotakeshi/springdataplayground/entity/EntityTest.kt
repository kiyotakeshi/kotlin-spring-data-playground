package com.kiyotakeshi.springdataplayground.entity

import com.kiyotakeshi.springdataplayground.repository.StudentRepository
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest
import org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager
import org.springframework.test.context.TestConstructor

@DataJpaTest
@TestConstructor(autowireMode = TestConstructor.AutowireMode.ALL)
internal class EntityTest(
    private var em: TestEntityManager,
    private var studentRepository: StudentRepository
) {

//    @Autowired
//    private lateinit var em: TestEntityManager

    /**
     * Hibernate: create table seats (id integer generated by default as identity, name varchar(255), primary key (id))
     * Hibernate: create table students (id integer generated by default as identity, name varchar(255), seat_id integer, primary key (id))
     * Hibernate: alter table students add constraint FK62ryxntnu5b02c8i5qyb5pipa foreign key (seat_id) references seats
     */
    @Test
    internal fun mapping() {
        val seat = Seat("Kokuyo")
        em.persistAndFlush(seat)
        System.out.println("seat id is " + seat.id) // 1

        val student = SimpleStudent("山田太郎", seat)
        em.persistAndFlush(student)

        // Hibernate: select student0_.id as id1_1_, student0_.name as name2_1_, student0_.seat_id as seat_id3_1_ from student student0_
        val students = studentRepository.findAll()

        students.forEach { i ->
            println(i)
            println(i?.seat)
            // Student(name='tanaka', seat=Seat(name='okamoto', id=100), id=100)
            // Seat(name='okamoto', id=100)
            // Student(name='山田太郎', seat=Seat(name='Kokuyo', id=101), id=101)
            // Seat(name='Kokuyo', id=101)
        }
    }

    @Test
    internal fun retrieve() {
        val student = studentRepository.findById(100).orElseThrow()
        println(student) // Student(name='tanaka', seat=Seat(name='okamoto', id=100), id=100)
        assertThat(student?.seat?.name).isEqualTo("okamoto")
    }
}
